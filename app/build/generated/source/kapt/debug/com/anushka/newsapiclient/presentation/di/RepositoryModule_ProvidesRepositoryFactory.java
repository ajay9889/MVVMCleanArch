// Generated by Dagger (https://dagger.dev).
package com.anushka.newsapiclient.presentation.di;

import com.anushka.newsapiclient.data.repository.datasource.NewsRemoteDataSource;
import com.anushka.newsapiclient.domain.repository.NewsRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvidesRepositoryFactory implements Factory<NewsRepository> {
  private final RepositoryModule module;

  private final Provider<NewsRemoteDataSource> newsRemoteDataSourceProvider;

  public RepositoryModule_ProvidesRepositoryFactory(RepositoryModule module,
      Provider<NewsRemoteDataSource> newsRemoteDataSourceProvider) {
    this.module = module;
    this.newsRemoteDataSourceProvider = newsRemoteDataSourceProvider;
  }

  @Override
  public NewsRepository get() {
    return providesRepository(module, newsRemoteDataSourceProvider.get());
  }

  public static RepositoryModule_ProvidesRepositoryFactory create(RepositoryModule module,
      Provider<NewsRemoteDataSource> newsRemoteDataSourceProvider) {
    return new RepositoryModule_ProvidesRepositoryFactory(module, newsRemoteDataSourceProvider);
  }

  public static NewsRepository providesRepository(RepositoryModule instance,
      NewsRemoteDataSource newsRemoteDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.providesRepository(newsRemoteDataSource));
  }
}
