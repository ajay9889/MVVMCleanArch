// Generated by Dagger (https://dagger.dev).
package com.anushka.newsapiclient.presentation;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;
import com.anushka.newsapiclient.MainActivity;
import com.anushka.newsapiclient.MainActivity_MembersInjector;
import com.anushka.newsapiclient.data.api.NewApiService;
import com.anushka.newsapiclient.data.repository.datasource.NewsRemoteDataSource;
import com.anushka.newsapiclient.domain.repository.NewsRepository;
import com.anushka.newsapiclient.domain.usecase.GetNewsHeadLineUseCase;
import com.anushka.newsapiclient.presentation.adapter.NewsAdapter;
import com.anushka.newsapiclient.presentation.di.AdapterModule;
import com.anushka.newsapiclient.presentation.di.AdapterModule_ProvideAdapterFactory;
import com.anushka.newsapiclient.presentation.di.FactoryModule;
import com.anushka.newsapiclient.presentation.di.FactoryModule_ProvideViewModelFactoryFactory;
import com.anushka.newsapiclient.presentation.di.NetModule;
import com.anushka.newsapiclient.presentation.di.NetModule_ProvideNewsApiServiceFactory;
import com.anushka.newsapiclient.presentation.di.NetModule_ProvideRetrofitFactory;
import com.anushka.newsapiclient.presentation.di.RemoteDataModule;
import com.anushka.newsapiclient.presentation.di.RemoteDataModule_ProvideNewsRemoteFactory;
import com.anushka.newsapiclient.presentation.di.RepositoryModule;
import com.anushka.newsapiclient.presentation.di.RepositoryModule_ProvidesRepositoryFactory;
import com.anushka.newsapiclient.presentation.di.UseCaseModule;
import com.anushka.newsapiclient.presentation.di.UseCaseModule_ProvideGetNewsHeadLinesUseCaseFactory;
import com.anushka.newsapiclient.presentation.viewmodel.NewsViewModelFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerNewsApp_HiltComponents_SingletonC extends NewsApp_HiltComponents.SingletonC {
  private final FactoryModule factoryModule;

  private final ApplicationContextModule applicationContextModule;

  private final UseCaseModule useCaseModule;

  private final RepositoryModule repositoryModule;

  private final RemoteDataModule remoteDataModule;

  private final NetModule netModule;

  private final AdapterModule adapterModule;

  private volatile Object retrofit = new MemoizedSentinel();

  private volatile Object newApiService = new MemoizedSentinel();

  private volatile Object newsRemoteDataSource = new MemoizedSentinel();

  private volatile Object newsRepository = new MemoizedSentinel();

  private volatile Object newsViewModelFactory = new MemoizedSentinel();

  private volatile Object newsAdapter = new MemoizedSentinel();

  private DaggerNewsApp_HiltComponents_SingletonC(AdapterModule adapterModuleParam,
      ApplicationContextModule applicationContextModuleParam, FactoryModule factoryModuleParam,
      NetModule netModuleParam, RemoteDataModule remoteDataModuleParam,
      RepositoryModule repositoryModuleParam, UseCaseModule useCaseModuleParam) {
    this.factoryModule = factoryModuleParam;
    this.applicationContextModule = applicationContextModuleParam;
    this.useCaseModule = useCaseModuleParam;
    this.repositoryModule = repositoryModuleParam;
    this.remoteDataModule = remoteDataModuleParam;
    this.netModule = netModuleParam;
    this.adapterModule = adapterModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private Retrofit retrofit() {
    Object local = retrofit;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = retrofit;
        if (local instanceof MemoizedSentinel) {
          local = NetModule_ProvideRetrofitFactory.provideRetrofit(netModule);
          retrofit = DoubleCheck.reentrantCheck(retrofit, local);
        }
      }
    }
    return (Retrofit) local;
  }

  private NewApiService newApiService() {
    Object local = newApiService;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = newApiService;
        if (local instanceof MemoizedSentinel) {
          local = NetModule_ProvideNewsApiServiceFactory.provideNewsApiService(netModule, retrofit());
          newApiService = DoubleCheck.reentrantCheck(newApiService, local);
        }
      }
    }
    return (NewApiService) local;
  }

  private NewsRemoteDataSource newsRemoteDataSource() {
    Object local = newsRemoteDataSource;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = newsRemoteDataSource;
        if (local instanceof MemoizedSentinel) {
          local = RemoteDataModule_ProvideNewsRemoteFactory.provideNewsRemote(remoteDataModule, newApiService());
          newsRemoteDataSource = DoubleCheck.reentrantCheck(newsRemoteDataSource, local);
        }
      }
    }
    return (NewsRemoteDataSource) local;
  }

  private NewsRepository newsRepository() {
    Object local = newsRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = newsRepository;
        if (local instanceof MemoizedSentinel) {
          local = RepositoryModule_ProvidesRepositoryFactory.providesRepository(repositoryModule, newsRemoteDataSource());
          newsRepository = DoubleCheck.reentrantCheck(newsRepository, local);
        }
      }
    }
    return (NewsRepository) local;
  }

  private GetNewsHeadLineUseCase getNewsHeadLineUseCase() {
    return UseCaseModule_ProvideGetNewsHeadLinesUseCaseFactory.provideGetNewsHeadLinesUseCase(useCaseModule, newsRepository());
  }

  private NewsViewModelFactory newsViewModelFactory() {
    Object local = newsViewModelFactory;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = newsViewModelFactory;
        if (local instanceof MemoizedSentinel) {
          local = FactoryModule_ProvideViewModelFactoryFactory.provideViewModelFactory(factoryModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule), getNewsHeadLineUseCase());
          newsViewModelFactory = DoubleCheck.reentrantCheck(newsViewModelFactory, local);
        }
      }
    }
    return (NewsViewModelFactory) local;
  }

  private NewsAdapter newsAdapter() {
    Object local = newsAdapter;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = newsAdapter;
        if (local instanceof MemoizedSentinel) {
          local = AdapterModule_ProvideAdapterFactory.provideAdapter(adapterModule);
          newsAdapter = DoubleCheck.reentrantCheck(newsAdapter, local);
        }
      }
    }
    return (NewsAdapter) local;
  }

  @Override
  public void injectNewsApp(NewsApp newsApp) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder();
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder();
  }

  public static final class Builder {
    private AdapterModule adapterModule;

    private ApplicationContextModule applicationContextModule;

    private FactoryModule factoryModule;

    private NetModule netModule;

    private RemoteDataModule remoteDataModule;

    private RepositoryModule repositoryModule;

    private UseCaseModule useCaseModule;

    private Builder() {
    }

    public Builder adapterModule(AdapterModule adapterModule) {
      this.adapterModule = Preconditions.checkNotNull(adapterModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder factoryModule(FactoryModule factoryModule) {
      this.factoryModule = Preconditions.checkNotNull(factoryModule);
      return this;
    }

    public Builder netModule(NetModule netModule) {
      this.netModule = Preconditions.checkNotNull(netModule);
      return this;
    }

    public Builder remoteDataModule(RemoteDataModule remoteDataModule) {
      this.remoteDataModule = Preconditions.checkNotNull(remoteDataModule);
      return this;
    }

    public Builder repositoryModule(RepositoryModule repositoryModule) {
      this.repositoryModule = Preconditions.checkNotNull(repositoryModule);
      return this;
    }

    public Builder useCaseModule(UseCaseModule useCaseModule) {
      this.useCaseModule = Preconditions.checkNotNull(useCaseModule);
      return this;
    }

    public NewsApp_HiltComponents.SingletonC build() {
      if (adapterModule == null) {
        this.adapterModule = new AdapterModule();
      }
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (factoryModule == null) {
        this.factoryModule = new FactoryModule();
      }
      if (netModule == null) {
        this.netModule = new NetModule();
      }
      if (remoteDataModule == null) {
        this.remoteDataModule = new RemoteDataModule();
      }
      if (repositoryModule == null) {
        this.repositoryModule = new RepositoryModule();
      }
      if (useCaseModule == null) {
        this.useCaseModule = new UseCaseModule();
      }
      return new DaggerNewsApp_HiltComponents_SingletonC(adapterModule, applicationContextModule, factoryModule, netModule, remoteDataModule, repositoryModule, useCaseModule);
    }
  }

  private final class ActivityRetainedCBuilder implements NewsApp_HiltComponents.ActivityRetainedC.Builder {
    @Override
    public NewsApp_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl();
    }
  }

  private final class ActivityRetainedCImpl extends NewsApp_HiltComponents.ActivityRetainedC {
    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl() {

    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder();
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private final class ActivityCBuilder implements NewsApp_HiltComponents.ActivityC.Builder {
      private Activity activity;

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public NewsApp_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(activity);
      }
    }

    private final class ActivityCImpl extends NewsApp_HiltComponents.ActivityC {
      private ActivityCImpl(Activity activity) {

      }

      @Override
      public void injectMainActivity(MainActivity mainActivity) {
        injectMainActivity2(mainActivity);
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerNewsApp_HiltComponents_SingletonC.this.applicationContextModule), Collections.<String>emptySet(), new ViewModelCBuilder(), Collections.<ViewModelProvider.Factory>emptySet(), Collections.<ViewModelProvider.Factory>emptySet());
      }

      @Override
      public Set<String> getViewModelKeys() {
        return Collections.<String>emptySet();
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder();
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder();
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder();
      }

      private MainActivity injectMainActivity2(MainActivity instance) {
        MainActivity_MembersInjector.injectFactory(instance, DaggerNewsApp_HiltComponents_SingletonC.this.newsViewModelFactory());
        MainActivity_MembersInjector.injectNewsAdapter(instance, DaggerNewsApp_HiltComponents_SingletonC.this.newsAdapter());
        return instance;
      }

      private final class FragmentCBuilder implements NewsApp_HiltComponents.FragmentC.Builder {
        private Fragment fragment;

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public NewsApp_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCImpl(fragment);
        }
      }

      private final class FragmentCImpl extends NewsApp_HiltComponents.FragmentC {
        private FragmentCImpl(Fragment fragment) {

        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return ActivityCImpl.this.getHiltInternalFactoryFactory();
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder();
        }

        private final class ViewWithFragmentCBuilder implements NewsApp_HiltComponents.ViewWithFragmentC.Builder {
          private View view;

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public NewsApp_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCImpl(view);
          }
        }

        private final class ViewWithFragmentCImpl extends NewsApp_HiltComponents.ViewWithFragmentC {
          private ViewWithFragmentCImpl(View view) {

          }
        }
      }

      private final class ViewCBuilder implements NewsApp_HiltComponents.ViewC.Builder {
        private View view;

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public NewsApp_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCImpl(view);
        }
      }

      private final class ViewCImpl extends NewsApp_HiltComponents.ViewC {
        private ViewCImpl(View view) {

        }
      }
    }

    private final class ViewModelCBuilder implements NewsApp_HiltComponents.ViewModelC.Builder {
      private SavedStateHandle savedStateHandle;

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public NewsApp_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(savedStateHandle);
      }
    }

    private final class ViewModelCImpl extends NewsApp_HiltComponents.ViewModelC {
      private ViewModelCImpl(SavedStateHandle savedStateHandle) {

      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return Collections.<String, Provider<ViewModel>>emptyMap();
      }
    }
  }

  private final class ServiceCBuilder implements NewsApp_HiltComponents.ServiceC.Builder {
    private Service service;

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public NewsApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(service);
    }
  }

  private final class ServiceCImpl extends NewsApp_HiltComponents.ServiceC {
    private ServiceCImpl(Service service) {

    }
  }
}
