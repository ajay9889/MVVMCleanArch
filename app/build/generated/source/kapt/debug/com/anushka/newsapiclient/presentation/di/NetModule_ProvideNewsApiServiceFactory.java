// Generated by Dagger (https://dagger.dev).
package com.anushka.newsapiclient.presentation.di;

import com.anushka.newsapiclient.data.api.NewApiService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetModule_ProvideNewsApiServiceFactory implements Factory<NewApiService> {
  private final NetModule module;

  private final Provider<Retrofit> retrofitProvider;

  public NetModule_ProvideNewsApiServiceFactory(NetModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public NewApiService get() {
    return provideNewsApiService(module, retrofitProvider.get());
  }

  public static NetModule_ProvideNewsApiServiceFactory create(NetModule module,
      Provider<Retrofit> retrofitProvider) {
    return new NetModule_ProvideNewsApiServiceFactory(module, retrofitProvider);
  }

  public static NewApiService provideNewsApiService(NetModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.provideNewsApiService(retrofit));
  }
}
