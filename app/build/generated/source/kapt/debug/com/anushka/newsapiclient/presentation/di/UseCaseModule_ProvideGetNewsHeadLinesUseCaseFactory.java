// Generated by Dagger (https://dagger.dev).
package com.anushka.newsapiclient.presentation.di;

import com.anushka.newsapiclient.domain.repository.NewsRepository;
import com.anushka.newsapiclient.domain.usecase.GetNewsHeadLineUseCase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCaseModule_ProvideGetNewsHeadLinesUseCaseFactory implements Factory<GetNewsHeadLineUseCase> {
  private final UseCaseModule module;

  private final Provider<NewsRepository> newsRepositoryProvider;

  public UseCaseModule_ProvideGetNewsHeadLinesUseCaseFactory(UseCaseModule module,
      Provider<NewsRepository> newsRepositoryProvider) {
    this.module = module;
    this.newsRepositoryProvider = newsRepositoryProvider;
  }

  @Override
  public GetNewsHeadLineUseCase get() {
    return provideGetNewsHeadLinesUseCase(module, newsRepositoryProvider.get());
  }

  public static UseCaseModule_ProvideGetNewsHeadLinesUseCaseFactory create(UseCaseModule module,
      Provider<NewsRepository> newsRepositoryProvider) {
    return new UseCaseModule_ProvideGetNewsHeadLinesUseCaseFactory(module, newsRepositoryProvider);
  }

  public static GetNewsHeadLineUseCase provideGetNewsHeadLinesUseCase(UseCaseModule instance,
      NewsRepository newsRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideGetNewsHeadLinesUseCase(newsRepository));
  }
}
