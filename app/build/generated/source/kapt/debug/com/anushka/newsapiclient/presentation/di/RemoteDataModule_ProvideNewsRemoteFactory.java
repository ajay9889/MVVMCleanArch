// Generated by Dagger (https://dagger.dev).
package com.anushka.newsapiclient.presentation.di;

import com.anushka.newsapiclient.data.api.NewApiService;
import com.anushka.newsapiclient.data.repository.datasource.NewsRemoteDataSource;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RemoteDataModule_ProvideNewsRemoteFactory implements Factory<NewsRemoteDataSource> {
  private final RemoteDataModule module;

  private final Provider<NewApiService> newApiServiceProvider;

  public RemoteDataModule_ProvideNewsRemoteFactory(RemoteDataModule module,
      Provider<NewApiService> newApiServiceProvider) {
    this.module = module;
    this.newApiServiceProvider = newApiServiceProvider;
  }

  @Override
  public NewsRemoteDataSource get() {
    return provideNewsRemote(module, newApiServiceProvider.get());
  }

  public static RemoteDataModule_ProvideNewsRemoteFactory create(RemoteDataModule module,
      Provider<NewApiService> newApiServiceProvider) {
    return new RemoteDataModule_ProvideNewsRemoteFactory(module, newApiServiceProvider);
  }

  public static NewsRemoteDataSource provideNewsRemote(RemoteDataModule instance,
      NewApiService newApiService) {
    return Preconditions.checkNotNullFromProvides(instance.provideNewsRemote(newApiService));
  }
}
